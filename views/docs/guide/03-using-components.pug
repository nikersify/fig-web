extends ../docs-base

block doc
	h1 Using components
	p.
		This is how a basic application in fig looks like: TODO

	.__example
		.file
			.name app.js
			script(type='x-example').
				const fig = require('figjs')
				const app = fig()

				app.state = {
					message: 'Hello!'
				}

				app.use(require('./Component.fig'))

				app.mount('#app', 'main-component')
		.file
			.name Component.fig
			script(type='x-example').
				label main-component

				template
					h1= title

				style.
					h1 {
						font-style: italic;
					}

				script.
					export default (view, opts, emit) => {
						view.title = opts.message
					}
		.file
			.name index.html
			script(type='x-example').
				<div id='app'></div>
	h2 app.js
	p.
		#[b= "fig( [config] )"] returns a new fig instance, #[b config] is
		optional object. If its #[b .debug] property is set to #[b true], fig's
		verbose logger will be enabled.
	p.
		#[b app.use(component)] registers a component.
	p.
		#[b app.state] is an object containing your app's data. It should be
		set once, and include all object keys that your app will use. Note, if
		that due to JavaScript limitations, if you #[b add] a new key to the state
		like #[code="app.state['key'] = x"], the view in your app will NOT
		be automagically updated!
	p.
		#[b app.mount(#el, componentName)] replaces the specified element
		#[i #el] with a #[b root component] of the given #[i componentName].

	h2 Component.fig
	p.
		#[b label] sets the component's default name. If not provided, it is
		generated by figify from the filename automatically - converting
		PascalCase names to kebab-case. This tag is optional.
	p.
		#[b template] contains pug markup which renders with locals
		which are set in #[b script]
	p.
		#[b style] contents are dumbly appended to the head of your page
		inside an ordinary style tag, with no preprocessing. You can style
		components with normal css outside of the component file, this is only
		provided as a convenience. This tag is optional.
	p.
		#[b script] must export a function, which is evaluated every time
		fig attempts to render the component. The function should accept the
		following parameters:
	.nest
		p.
			#[b view] object is passed to the #[b template]
		p.
			#[b opts] is either the #[b app.state] object if
			the component is the #[b root component], otherwise contains the opts
			passed to the nested component.
		p.
			#[b emit] is a function which can be used to emit events to the
			app's event bus.
	p This tag is optional.
